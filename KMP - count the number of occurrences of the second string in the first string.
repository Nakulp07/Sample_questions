//  You are given two strings containing only English letters. Write an algorithm to count the number of occurrences of the
//  second string in the first string. (You may disregard the case of the letters.

#include<iostream>
#include<string>
#include<vector>
#include<algorithm> // For transform function
using namespace std;

// Helper function to compute the LPS array
void computeLPS(string pattern, vector<int>& lps) {
    int M = pattern.length();
    int len = 0;

    lps[0] = 0;

    int i = 1;
    while (i < M) {
        if (pattern[i] == pattern[len]) {
            len++;
            lps[i] = len;
            i++;
        } else {
            if (len != 0) {
                len = lps[len - 1];
            } else {
                lps[i] = 0;
                i++;
            }
        }
    }
}

// Function to count the occurrences of the pattern in the text
int countOccur(string txt, string pat) {
    int N = txt.length();
    int M = pat.length();
    int cnt = 0;

    vector<int> lps(M, 0);
    computeLPS(pat, lps);

    int i = 0; // Index for text
    int j = 0; // Index for pattern

    while (i < N) {
        if (pat[j] == txt[i]) {
            i++;
            j++;
        }

        if (j == M) {
            cnt++;
            j = lps[j - 1];
        } else if (i < N && pat[j] != txt[i]) {
            if (j != 0) {
                j = lps[j - 1];
            } else {
                i++;
            }
        }
    }

    return cnt;
}

int main() {
    // Input for parent string
    string parent;
    getline(cin, parent);

    // Input for sub string
    string sub;
    getline(cin, sub);

    // Convert both strings to lowercase to disregard case
    transform(parent.begin(), parent.end(), parent.begin(), ::tolower);
    transform(sub.begin(), sub.end(), sub.begin(), ::tolower);

    // Call the function to count occurrences
    int result = countOccur(parent, sub);
    cout << result;

    return 0;
}
